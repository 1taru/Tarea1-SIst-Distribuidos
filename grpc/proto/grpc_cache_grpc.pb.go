// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	// Método para obtener un valor de la caché
	GetFromCache(ctx context.Context, in *GetFromCacheRequest, opts ...grpc.CallOption) (*GetFromCacheResponse, error)
	// Método para escribir un valor en la caché
	SetInCache(ctx context.Context, in *SetInCacheRequest, opts ...grpc.CallOption) (*SetInCacheResponse, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) GetFromCache(ctx context.Context, in *GetFromCacheRequest, opts ...grpc.CallOption) (*GetFromCacheResponse, error) {
	out := new(GetFromCacheResponse)
	err := c.cc.Invoke(ctx, "/grpc_cache.CacheService/GetFromCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetInCache(ctx context.Context, in *SetInCacheRequest, opts ...grpc.CallOption) (*SetInCacheResponse, error) {
	out := new(SetInCacheResponse)
	err := c.cc.Invoke(ctx, "/grpc_cache.CacheService/SetInCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	// Método para obtener un valor de la caché
	GetFromCache(context.Context, *GetFromCacheRequest) (*GetFromCacheResponse, error)
	// Método para escribir un valor en la caché
	SetInCache(context.Context, *SetInCacheRequest) (*SetInCacheResponse, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) GetFromCache(context.Context, *GetFromCacheRequest) (*GetFromCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromCache not implemented")
}
func (UnimplementedCacheServiceServer) SetInCache(context.Context, *SetInCacheRequest) (*SetInCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInCache not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s *grpc.Server, srv CacheServiceServer) {
	s.RegisterService(&_CacheService_serviceDesc, srv)
}

func _CacheService_GetFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cache.CacheService/GetFromCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetFromCache(ctx, req.(*GetFromCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetInCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetInCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cache.CacheService/SetInCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetInCache(ctx, req.(*SetInCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_cache.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFromCache",
			Handler:    _CacheService_GetFromCache_Handler,
		},
		{
			MethodName: "SetInCache",
			Handler:    _CacheService_SetInCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_cache.proto",
}

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	// Método para obtener un valor de la base de datos
	GetFromDatabase(ctx context.Context, in *GetFromDatabaseRequest, opts ...grpc.CallOption) (*GetFromDatabaseResponse, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) GetFromDatabase(ctx context.Context, in *GetFromDatabaseRequest, opts ...grpc.CallOption) (*GetFromDatabaseResponse, error) {
	out := new(GetFromDatabaseResponse)
	err := c.cc.Invoke(ctx, "/grpc_cache.DatabaseService/GetFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility
type DatabaseServiceServer interface {
	// Método para obtener un valor de la base de datos
	GetFromDatabase(context.Context, *GetFromDatabaseRequest) (*GetFromDatabaseResponse, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (UnimplementedDatabaseServiceServer) GetFromDatabase(context.Context, *GetFromDatabaseRequest) (*GetFromDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromDatabase not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_GetFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_cache.DatabaseService/GetFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetFromDatabase(ctx, req.(*GetFromDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_cache.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFromDatabase",
			Handler:    _DatabaseService_GetFromDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_cache.proto",
}
